{% for type in types.all %}
{% if type.initializers.count == 0 %}
{% set spacing %}{% if type.parentName %}    {% endif %}{% endset %}

// sourcery:inline:{{ type.name }}.IdentifierKey
{{spacing}}    /// A type that can be used as a key for identifier encoding
{{spacing}}    private enum IdentifierKey: String, CodingKey { // swiftlint:disable:this nesting
{{spacing}}        case identifier = "id"
{{spacing}}    }

{{spacing}}    /// The unique resource identifier to this specific entry
{{spacing}}    public let identifier: UInt64

{{spacing}}    /// Creates a new instance by decoding from the given decoder.
{{spacing}}    ///
{{spacing}}    /// This initializer throws an error if reading from the decoder fails, or
{{spacing}}    /// if the data read is corrupted or otherwise invalid.
{{spacing}}    ///
{{spacing}}    /// - Parameter decoder: The decoder to read data from.
{{spacing}}    {{ type.accessLevel }} required init(from decoder: Decoder) throws {
{{spacing}}        let container = try decoder.container(keyedBy: IdentifierKey.self)
{{spacing}}        identifier = try container.decode(Identifier.self, forKey: .identifier)
{{spacing}}        try super.init(from: decoder)
{{spacing}}    }

{{spacing}}    /// Encodes this value into the given encoder.
{{spacing}}    ///
{{spacing}}    /// If the value fails to encode anything, `encoder` will encode an empty keyed container in its place.
{{spacing}}    ///
{{spacing}}    /// This function throws an error if any values are invalid for the given encoder's format.
{{spacing}}    ///
{{spacing}}    /// - Parameter encoder: The encoder to write data to.
{{spacing}}    {{ type.accessLevel }} override func encode(to encoder: Encoder) throws {
{{spacing}}        var container = encoder.container(keyedBy: IdentifierKey.self)
{{spacing}}        try container.encode(identifier, forKey: .identifier)
{{spacing}}        try super.encode(to: encoder)
{{spacing}}    }
// sourcery:end
{% endif %}
{% endfor %}
