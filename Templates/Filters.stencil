{% for type in types.all.implementing.AutoComposable|struct %}
// sourcery:file:{{ type.name}}+Filters.gen.swift
import Foundation

extension {{ type.name }} {

    /// A type that can be used for expressing required fields
    {{ type.accessLevel }} enum Filter {
        {% for variable in type.storedVariables %}
        {% set CamelCased %}{{ variable.name | camelToSnakeCase }}{% endset %}
        {% if variable.name != "identifier" %}{# Identifier is skipped on fields #}
        case {{ variable.name }}(Operator, {{ variable.typeName }})
        {% endif %}{# Identifier skip #}
        {% endfor %}

        internal var stringValue: String {
            switch self {
            {% for variable in type.storedVariables %}
            {% set CamelCased %}{{ variable.name | camelToSnakeCase }}{% endset %}
            {% if variable.name != "identifier" %}{# Identifier is skipped on fields #}
            case .{{ variable.name }}:
            {% if variable.annotations.key %}
                return "{{ variable.annotations.key }}"
            {% elif variable.name != CamelCased %}
                return "{{ CamelCased }}"
            {% else %}
                return "{{ variable.name }}"
            {% endif %}
            {% endif %}{# Identifier skip #}
            {% endfor %}
            }
        }
    }
}
// sourcery:end
{% endfor %}
