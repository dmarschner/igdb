{% for type in types.all %}
// sourcery:inline:{{ type.name }}.Composable

    /// Returns the path of coding keys it takes to get to given `keyPath`
    ///
    /// - Parameter keyPath: The `keyPath` to look up
    /// - Returns: The coding keys, or path, it takes to get to given `keyPath`
    public static func codingPath(for keyPath: PartialKeyPath<{{ type.name }}>) throws -> [CodingKey] {
        switch keyPath {
        {% for variable in type.storedVariables %}
        {# Handle the variable itself first #}
        case \{{ type.name }}.{{ variable.name }}: return [CodingKeys.{{ variable.name }}]
        {# If it is of composable type, than add these keys as well #}
        {% set TypeName %}{{ type.name }}.{{ variable.typeName|replace:"?","" }}{% endset %}
        {% for subtype in types.based.Composable %} {# Composable types #}
        {% if TypeName == subtype.name %} {# and fits the name, so extend with its values #}
        {% for subvariable in subtype.storedVariables %}
        {# Handle the variable itself first #}
        case \{{ type.name }}.{{ variable.name }}?.{{ subvariable.name }}:
            return [CodingKeys.{{ variable.name }}, {{ TypeName }}.CodingKeys.{{ subvariable.name }}]
        {% endfor %}{# Subvar extensions #}
        {% endif %}{# If subvar extensions necessary #}
        {% endfor %}{# Composable types #}
        {% endfor %}{# Variables on self #}
        default: throw Error.unexpectedKeyPath(keyPath)
        }
    }
// sourcery:end
{% endfor %}
