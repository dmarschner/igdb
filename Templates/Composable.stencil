{% for type in types.all %}
// sourcery:inline:{{ type.name }}.Composable

    /// Returns the path of coding keys it takes to get to given `keyPath`
    ///
    /// - Parameter keyPath: The `keyPath` to look up
    /// - Returns: The coding keys, or path, it takes to get to given `keyPath`
    public static func codingPath(for keyPath: AnyKeyPath) throws -> [CodingKey] {
        {# Check if there is a Composable Type used as variable in `Self`  #}
        {% for subType in types.based.Composable %} {# All Composable types #}
        {% for variable in type.storedVariables %}  {# All stored variables #}
        {% if subType.name == variable.typeName|replace:"?","" %} {# Match! Extend the Composable type query #}

        if type(of: keyPath).rootType is {{ subType.name }}.Type {
            return try {{ type.name }}.codingPath(for: \{{ type.name }}.{{ variable.name }})
                + {{ subType.name }}.codingPath(for: keyPath)
        }
        {% endif %} {# Match! Extend the Composable type query #}
        {% endfor %} {# All stored variables #}
        {% endfor %} {# All Composable types #}

        // Each single `keyPath` in `Self`
        switch keyPath {
        {% for variable in type.storedVariables %}
        case \{{ type.name }}.{{ variable.name }}: return [CodingKeys.{{ variable.name }}]
        {% endfor %}
        default: throw Error.unexpectedKeyPath(keyPath)
        }
    }
// sourcery:end
{% endfor %}
