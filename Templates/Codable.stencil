{% for type in types.all %}
// sourcery:inline:{{ type.name }}.Codable

    /// A type that can be used as a key for encoding and decoding.
    {{ type.accessLevel }} enum CodingKeys: String, CodingKey {
        {% for variable in type.storedVariables %}
        {% set SnakeCaseName %}{{ variable.name | camelToSnakeCase }}{% endset %}
        {% if variable.name == "identifier" %}
        case identifier = "id"
        {% elif variable.annotations.key %}
        case {{ variable.name }} = "{{ variable.annotations.key }}"
        {% elif variable.name != SnakeCaseName %}
        case {{ variable.name }} = "{{ SnakeCaseName }}"
        {% else %}
        case {{ variable.name }}
        {% endif %}
        {% endfor %}
    }

    /// Creates a new instance by decoding from the given decoder.
    ///
    /// This initializer throws an error if reading from the decoder fails, or
    /// if the data read is corrupted or otherwise invalid.
    ///
    /// - Parameter decoder: The decoder to read data from.
    public init(from decoder: Decoder) throws {
        // Find proper container, and decode the identifier right away. This is the only mandatory property.
        let container: KeyedDecodingContainer<{{ type.name }}.CodingKeys>?
        if let singleContainer = try? decoder.singleValueContainer() {
            identifier = try singleContainer.decode(Identifier.self)
            container = nil
        } else {
            let keyedContainer = try decoder.container(keyedBy: CodingKeys.self)
            identifier = try keyedContainer.decode(Identifier.self, forKey: .identifier)
            container = keyedContainer
        }
        // Extended decoding - any other property than identifier is optional
        {% for variable in type.storedVariables where variable.name != "identifier" %}
        {% set TypeName %}{{ variable.typeName | replace:"?","" }}{% endset %}
        {{ variable.name }} = try container?.decodeIfPresent({{TypeName}}.self, forKey: .{{ variable.name }}) ?? nil
        {% endfor %}
    }

    /// Encodes this value into the given encoder.
    ///
    /// If the value fails to encode anything, `encoder` will encode an empty
    /// keyed container in its place.
    ///
    /// This function throws an error if any values are invalid for the given
    /// encoder's format.
    ///
    /// - Parameter encoder: The encoder to write data to.
    public func encode(to encoder: Encoder) throws {
        guard !isSingleValueContainable() else {
            var container = encoder.singleValueContainer()
            return try container.encode(identifier)
        }
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(identifier, forKey: .identifier)
        {% for variable in type.storedVariables where variable.name != "identifier" %}
        try container.encodeIfPresent({{ variable.name }}, forKey: .{{ variable.name }})
        {% endfor %}
    }

    /// Returns true if all properties but the identifier are `nil`.
    public func isSingleValueContainable() -> Bool {
        return  // true, if all properties are nil
        {% for variable in type.storedVariables where variable.name != "identifier" %}
            {{ variable.name }} == nil &&
        {% endfor %}
            true // Have not found a way to trim the last && with sourcery
    }
// sourcery:end
{% endfor %}
