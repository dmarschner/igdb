{% for type in types.all %}
{% set spacing %}{% if type.parentName %}    {% endif %}{% endset %}
// sourcery:inline:{{ type.name }}.Codable

{{spacing}}    /// A type that can be used as a key for encoding and decoding.
{{spacing}}    {{ type.accessLevel }} enum CodingKeys: String, CodingKey {
{{spacing}}        {% for variable in type.storedVariables %}
{{spacing}}        {% set SnakeCaseName %}{{ variable.name | camelToSnakeCase }}{% endset %}
{{spacing}}        {% if variable.name == "identifier" %}
{{spacing}}        case identifier = "id"
{{spacing}}        {% elif variable.annotations.key %}
{{spacing}}        case {{ variable.name }} = "{{ variable.annotations.key }}"
{{spacing}}        {% elif variable.name != SnakeCaseName %}
{{spacing}}        case {{ variable.name }} = "{{ SnakeCaseName }}"
{{spacing}}        {% else %}
{{spacing}}        case {{ variable.name }}
{{spacing}}        {% endif %}
{{spacing}}        {% endfor %}
{{spacing}}    }

{{spacing}}    /// Creates a new instance by decoding from the given decoder.
{{spacing}}    ///
{{spacing}}    /// This initializer throws an error if reading from the decoder fails, or
{{spacing}}    /// if the data read is corrupted or otherwise invalid.
{{spacing}}    ///
{{spacing}}    /// - Parameter decoder: The decoder to read data from.
{{spacing}}    public init(from decoder: Decoder) throws {
{{spacing}}        // Find proper container, and decode the identifier right away. This is the only mandatory property.
{{spacing}}        let container: KeyedDecodingContainer<{{ type.name }}.CodingKeys>?
{{spacing}}        if let keyedContainer = try? decoder.container(keyedBy: CodingKeys.self) {
{{spacing}}            identifier = try keyedContainer.decode(Identifier.self, forKey: .identifier)
{{spacing}}            container = keyedContainer
{{spacing}}        } else {
{{spacing}}            let singleContainer = try decoder.singleValueContainer()
{{spacing}}            identifier = try singleContainer.decode(Identifier.self)
{{spacing}}            container = nil
{{spacing}}        }
{{spacing}}        // Extended decoding - any other property than identifier is optional
{{spacing}}        {% for variable in type.storedVariables where variable.name != "identifier" %}
{{spacing}}        {% set TypeName %}{{ variable.typeName | replace:"?","" }}{% endset %}
{{spacing}}        {{ variable.name }} = try container?.decodeIfPresent({{TypeName}}.self, forKey: .{{ variable.name }}) ?? nil
{{spacing}}        {% endfor %}
{{spacing}}    }

{{spacing}}    /// Encodes this value into the given encoder.
{{spacing}}    ///
{{spacing}}    /// If the value fails to encode anything, `encoder` will encode an empty
{{spacing}}    /// keyed container in its place.
{{spacing}}    ///
{{spacing}}    /// This function throws an error if any values are invalid for the given
{{spacing}}    /// encoder's format.
{{spacing}}    ///
{{spacing}}    /// - Parameter encoder: The encoder to write data to.
{{spacing}}    public func encode(to encoder: Encoder) throws {
{{spacing}}        guard !isSingleValueContainable() else {
{{spacing}}            var container = encoder.singleValueContainer()
{{spacing}}            return try container.encode(identifier)
{{spacing}}        }
{{spacing}}        var container = encoder.container(keyedBy: CodingKeys.self)
{{spacing}}        try container.encode(identifier, forKey: .identifier)
{{spacing}}        {% for variable in type.storedVariables where variable.name != "identifier" %}
{{spacing}}        try container.encodeIfPresent({{ variable.name }}, forKey: .{{ variable.name }})
{{spacing}}        {% endfor %}
{{spacing}}    }

{{spacing}}    /// Returns true if all properties but the identifier are `nil`.
{{spacing}}    public func isSingleValueContainable() -> Bool {
{{spacing}}        return  // true, if all properties are nil
{{spacing}}        {% for variable in type.storedVariables where variable.name != "identifier" %}
{{spacing}}            {{ variable.name }} == nil &&
{{spacing}}        {% endfor %}
{{spacing}}            true // Have not found a way to trim the last && with sourcery
{{spacing}}    }
// sourcery:end
{% endfor %}
